#
#  This file is part of Permafrost Engine. 
#  Copyright (C) 2018 Eduard Permyakov 
#
#  Permafrost Engine is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Permafrost Engine is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
#  Linking this software statically or dynamically with other modules is making 
#  a combined work based on this software. Thus, the terms and conditions of 
#  the GNU General Public License cover the whole combination. 
#  
#  As a special exception, the copyright holders of Permafrost Engine give 
#  you permission to link Permafrost Engine with independent modules to produce 
#  an executable, regardless of the license terms of these independent 
#  modules, and to copy and distribute the resulting executable under 
#  terms of your choice, provided that you also meet, for each linked 
#  independent module, the terms and conditions of the license of that 
#  module. An independent module is a module which is not derived from 
#  or based on Permafrost Engine. If you modify Permafrost Engine, you may 
#  extend this exception to your version of Permafrost Engine, but you are not 
#  obliged to do so. If you do not wish to do so, delete this exception 
#  statement from your version.
#

import pf
import os
import textwrap
import types

wrapper4 = textwrap.TextWrapper(width=80, subsequent_indent="    ")
wrapper8 = textwrap.TextWrapper(width=80, subsequent_indent="        ")

print("********************************************************************************")
print("Permafrost Engine Python API documentation")
print("Module: {0}".format(pf.__name__))
print("********************************************************************************")
print("")
print("This file is generated by the script: {0}.".format(os.path.basename(__file__)))
print("Use this script as the engine argument to generate up-to-date API documentation.")
print("")
print("********************************************************************************")
print("BUILT-IN FUNCTIONS")
print("********************************************************************************")
print("")

for func in [getattr(pf, attr) for attr in dir(pf) if isinstance(getattr(pf, attr), types.BuiltinFunctionType)]:
    print("    [{0}]".format(func.__name__))
    print("    --------------------------------------------------------------------------------")
    print("    {0}".format(wrapper4.fill(func.__doc__)))
    print("")

print("********************************************************************************")
print("BUILT-IN CLASSES")
print("********************************************************************************")
print("")

for cls in [getattr(pf, attr) for attr in dir(pf) if isinstance(getattr(pf, attr), types.TypeType)]:
    print("    [{0}]".format(cls.__name__))
    print("    --------------------------------------------------------------------------------")
    print("    {0}".format(wrapper4.fill(cls.__doc__)))
    print("")

    fields = [getattr(cls, attr) for attr in dir(cls) if isinstance(getattr(cls, attr), types.MemberDescriptorType) \
                                                      or isinstance(getattr(cls, attr), types.GetSetDescriptorType)]
    if len(fields) > 0:
        print("        ************************************************************************")
        print("        MEMBERS")
        print("        ************************************************************************")
    for field in fields:
        print("        [{0}]".format(field.__name__))
        print("        {0}".format(wrapper8.fill(field.__doc__)))
        print("")

    methods = [getattr(cls, attr) for attr in dir(cls) if callable(getattr(cls, attr))
                                                       and attr not in dir(object)
                                                       and not isinstance(getattr(cls, attr), types.BuiltinMethodType)
                                                       and type(attr) != type(object.__init__)]
    if len(methods) > 0:
        print("        ************************************************************************")
        print("        METHODS")
        print("        ************************************************************************")
    for method in methods:
        print("        [{0}]".format(method.__name__))
        print("        {0}".format(wrapper8.fill(method.__doc__)))
        print("")

print("********************************************************************************")
print("BUILT-IN CONSTANTS")
print("********************************************************************************")
print("")

for const in [attr for attr in dir(pf) if (isinstance(getattr(pf, attr), types.IntType)
                                       or isinstance(getattr(pf, attr), types.LongType)
                                       or isinstance(getattr(pf, attr), types.FloatType)
                                       or isinstance(getattr(pf, attr), types.StringType)
                                       or isinstance(getattr(pf, attr), types.UnicodeType))
                                       and attr != '__name__']:
    print("    {0} {1}".format(const, getattr(pf, const)))

pf.new_game("assets/maps", "demo.pfmap") # for a clean exit
pf.global_event(pf.SDL_QUIT, None)

